name: nasa-donki
permissions:
  contents: write

on:
  schedule:
    - cron: "*/15 * * * *"   
  workflow_dispatch: {}

jobs:
  run:
    runs-on: ubuntu-latest
    env:
      SUPABASE_DB_URL: ${{ secrets.SUPABASE_DB_URL }}
      NASA_API_KEY: ${{ secrets.NASA_API_KEY }}
      START_DAYS_AGO: "14"         # pull last 14 days each run (idempotent upsert)
      DONKI_MAX_RETRIES: "6"     # max retries for NASA DONKI API calls
      DONKI_RETRY_BASE_MS: "800"  # base ms for exponential backoff of retries
      DONKI_DAY_MODE: "1"        # 1 = use day mode (more granular, more calls), 0 = use month mode (less granular, fewer calls)
      DONKI_DAY_SLEEP_MS: "800"   # ms to sleep between day mode calls (to avoid rate limiting)
      DONKI_PRIMARY_RETRIES: "2" # primary retries for NASA DONKI API calls (after initial call, before exponential backoff)
      DONKI_FALLBACK_RETRIES: "6" # fallback retries for NASA DONKI API calls (after primary retries, with exponential backoff)
      # JSON emitter / media publish
      OUTPUT_JSON_GZIP: "false"
      MEDIA_REPO_OWNER: ${{ secrets.MEDIA_REPO_OWNER }}
      MEDIA_REPO_NAME:  ${{ secrets.MEDIA_REPO_NAME }}
      GAIAEYES_MEDIA_TOKEN: ${{ secrets.GAIAEYES_MEDIA_TOKEN }}
      MEDIA_ROOT: ${{ secrets.MEDIA_ROOT }}
      MEDIA_CDN_BASE: ${{ secrets.MEDIA_CDN_BASE }}
    steps:
      - uses: actions/checkout@v4
      - name: Checkout media repo (gaiaeyes-media)
        uses: actions/checkout@v4
        with:
          repository: ${{ env.MEDIA_REPO_OWNER }}/${{ env.MEDIA_REPO_NAME }}
          token: ${{ env.GAIAEYES_MEDIA_TOKEN }}
          path: gaiaeyes-media
      - name: Set OUTPUT_JSON_PATH for emitter (fixed to media/data)
        run: |
          # Always emit into gaiaeyes-media/data first (stable), then we'll copy to docs if MEDIA_ROOT=docs
          DEST="${{ github.workspace }}/gaiaeyes-media/data/flares_cmes.json"
          mkdir -p "$(dirname "${DEST}")"
          echo "OUTPUT_JSON_PATH=${DEST}" >> $GITHUB_ENV
          echo "Using OUTPUT_JSON_PATH=${DEST}"
      - uses: actions/setup-python@v5
        with: { python-version: "3.11" }
      - run: pip install httpx asyncpg
      - name: Run DONKI ingester
        env:
          OUTPUT_JSON_PATH: ${{ env.OUTPUT_JSON_PATH }}
        run: |
          echo "DEBUG OUTPUT_JSON_PATH at runtime: ${OUTPUT_JSON_PATH}"
          python scripts/ingest_nasa_donki.py
      - name: Debug media paths & remotes
        run: |
          echo "GITHUB_WORKSPACE=${GITHUB_WORKSPACE}"
          echo "Listing gaiaeyes-media/data:"
          ls -l "${GITHUB_WORKSPACE}/gaiaeyes-media/data" || true
          if [ -n "${MEDIA_ROOT}" ]; then
            echo "Listing gaiaeyes-media/${MEDIA_ROOT%/}/data:"
            ls -l "${GITHUB_WORKSPACE}/gaiaeyes-media/${MEDIA_ROOT%/}/data" || true
          fi
          echo "Git remotes for media repo:"
          git -C gaiaeyes-media remote -v
      - name: (Optional) Validate flares_cmes.json
        run: |
          FILE="${OUTPUT_JSON_PATH}"
          echo "Validating ${FILE}"
          if command -v jq >/dev/null 2>&1; then
            jq -e '.timestamp_utc and .flares and .cmes and (.cmes.headline|type=="string")' "${FILE}" >/dev/null && echo "JSON looks OK" || echo "WARN: JSON missing fields"
          else
            echo "jq not found; skipping validation"
          fi
      - name: Commit & push updated flares_cmes.json
        run: |
          set -euo pipefail
          cd gaiaeyes-media
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          # Ensure we're on latest main before committing (avoid non-fast-forward)
          git fetch origin main
          git checkout -B main origin/main
          # Stage only the target file
          DEST_DIR="data"
          FILE="${DEST_DIR}/flares_cmes.json"
          if [ ! -f "${FILE}" ]; then
            echo "ERROR: ${FILE} not found"; exit 1
          fi
          git add -- "${FILE}"
          if git diff --cached --quiet -- "${FILE}"; then
            echo "No JSON changes to commit."
            exit 0
          fi
          ts="$(date -u +'%Y-%m-%dT%H:%M:%SZ')"
          git commit -m "chore(donki): update flares_cmes.json ${ts} [skip ci]"
          # Robust push with rebase + lease and bounded retries (handles concurrent pushes)
          for attempt in 1 2 3; do
            echo "Push attempt ${attempt}..."
            git pull --rebase --autostash origin main || true
            if git push --force-with-lease origin HEAD:main; then
              echo "Push succeeded on attempt ${attempt}."
              if [ -n "${MEDIA_CDN_BASE}" ]; then
                echo "Published: ${MEDIA_CDN_BASE%/}/flares_cmes.json"
              fi
              exit 0
            fi
            echo "Push failed on attempt ${attempt}, retrying..."
            sleep $((2 + (RANDOM % 4)))
          done
          echo "ERROR: Could not push after 3 attempts."
          exit 1
