name: Schumann Extractors

on:
  schedule:
    - cron: "*/15 * * * *"   # every 15 minutes UTC
  workflow_dispatch:

jobs:
  run-schumann:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    env:
      BACKEND_DIR: backend
      WORKDIR: backend/bots/schumann
      MEDIA_DIR: media
      PYTHON_VERSION: "3.10"
      PREFER: "tomsk,cumiana"

    steps:
      - name: Checkout backend
        uses: actions/checkout@v4
        with:
          path: ${{ env.BACKEND_DIR }}

      - name: Checkout media repo
        uses: actions/checkout@v4
        with:
          repository: gennwu/gaiaeyes-media
          path: ${{ env.MEDIA_DIR }}
          token: ${{ secrets.GAIAEYES_MEDIA_TOKEN }}
          persist-credentials: true
          clean: true
          sparse-checkout-cone-mode: true
          fetch-depth: 1
          fetch-tags: false
          show-progress: true
          lfs: false
          submodules: false
          set-safe-directory: true

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        working-directory: ${{ env.WORKDIR }}
        run: |
          python -m pip install --upgrade pip
          pip install .

      - name: Run extractors and merge
        id: run
        working-directory: ${{ env.WORKDIR }}
        run: |
          set -euo pipefail
          TS="$(date -u +'%Y%m%d_%H%M%SZ')"
          echo "ts=$TS" >> "$GITHUB_OUTPUT"
          mkdir -p runs

          # Tomsk (mark stale if Last-Modified > 6h)
          python tomsk_extractor.py \
            --out runs/tomsk_now.json \
            --overlay runs/tomsk_overlay.png \
            --stale-hours 6 \
            --insecure || true

          # Cumiana (SR-only, fixed now offset = 22 px)
          python cumiana_extractor.py \
            --out runs/cumiana_now.json \
            --overlay runs/cumiana_overlay.png \
            --anchor fixed --fixed-offset-px 22 \
            --prefer auto \
            --insecure || true

          # Merge (both sources always present)
          python schumann_multi.py \
            --prefer "${PREFER}" \
            --out runs/schumann_now.json \
            --overlay runs/.ignore_overlay.png \
            --insecure || true

      - name: Stage artifacts into media repo (latest only)
        id: stage_latest
        working-directory: ${{ env.WORKDIR }}
        env:
          MEDIA_DIR: ${{ github.workspace }}/media
        run: |
          set -euo pipefail
          mkdir -p "$MEDIA_DIR/images" "$MEDIA_DIR/data"

          echo "Listing runs/ before copy:"; ls -lah runs || true

          # Track whether we copied or have at least one usable artifact
          have_any=false

          # Images (latest only). If missing, keep existing.
          if [ -f runs/tomsk_overlay.png ]; then
            cp -f runs/tomsk_overlay.png   "$MEDIA_DIR/images/tomsk_latest.png" && have_any=true
          else
            echo "WARN: runs/tomsk_overlay.png not found; keeping existing images/tomsk_latest.png"
          fi

          if [ -f runs/cumiana_overlay.png ]; then
            cp -f runs/cumiana_overlay.png "$MEDIA_DIR/images/cumiana_latest.png" && have_any=true
          else
            echo "WARN: runs/cumiana_overlay.png not found; keeping existing images/cumiana_latest.png"
          fi

          # JSONs (latest only). If missing, keep existing.
          if [ -f runs/schumann_now.json ]; then
            cp -f runs/schumann_now.json   "$MEDIA_DIR/data/schumann_latest.json" && have_any=true
          else
            echo "WARN: runs/schumann_now.json not found; keeping existing data/schumann_latest.json"
          fi

          if [ -f runs/tomsk_now.json ]; then
            if cp -f runs/tomsk_now.json "$MEDIA_DIR/data/tomsk_latest.json"; then have_any=true; fi
          else
            echo "WARN: runs/tomsk_now.json not found; keeping existing data/tomsk_latest.json"
          fi

          if [ -f runs/cumiana_now.json ]; then
            if cp -f runs/cumiana_now.json "$MEDIA_DIR/data/cumiana_latest.json"; then have_any=true; fi
          else
            echo "WARN: runs/cumiana_now.json not found; keeping existing data/cumiana_latest.json"
          fi

          echo "Listing media/ after copy:"; ls -lah "$MEDIA_DIR/images" || true; ls -lah "$MEDIA_DIR/data" || true

          # Final guard: ensure at least one latest artifact exists in media (image or JSON)
          if [ "$have_any" = false ] && \
             [ ! -f "$MEDIA_DIR/images/tomsk_latest.png" ] && \
             [ ! -f "$MEDIA_DIR/images/cumiana_latest.png" ] && \
             [ ! -f "$MEDIA_DIR/data/schumann_latest.json" ] && \
             [ ! -f "$MEDIA_DIR/data/tomsk_latest.json" ] && \
             [ ! -f "$MEDIA_DIR/data/cumiana_latest.json" ]; then
            echo "ERROR: No latest artifacts to publish (neither images nor JSON). Aborting commit to avoid wiping repo."
            echo "ok=false" >> "$GITHUB_OUTPUT"
            exit 1
          fi

          echo "ok=true" >> "$GITHUB_OUTPUT"

      - name: Remove timestamped media artifacts (keep only *_latest.*)
        if: ${{ steps.stage_latest.outputs.ok == 'true' }}
        working-directory: ${{ env.MEDIA_DIR }}
        run: |
          set -euo pipefail
          echo "Removing timestamped PNG/JSON files; keeping *_latest.* only..."

          # Ensure directories exist
          mkdir -p images data

          # Remove station/merged PNGs with timestamps (do not touch *_latest.png)
          git rm -f images/tomsk_*.png 2>/dev/null || true
          git rm -f images/cumiana_*.png 2>/dev/null || true
          git rm -f images/schumann_*.png 2>/dev/null || true

          # Remove station/merged JSONs with timestamps (do not touch *_latest.json)
          git rm -f data/tomsk_*.json 2>/dev/null || true
          git rm -f data/cumiana_*.json 2>/dev/null || true
          git rm -f data/schumann_*.json 2>/dev/null || true

          echo "After cleanup, media contains:"; ls -lah images || true; ls -lah data || true

      - name: "Preflight: verify media remote auth"
        if: ${{ steps.stage_latest.outputs.ok == 'true' }}
        working-directory: ${{ env.MEDIA_DIR }}
        run: |
          set -euo pipefail
          echo "Remote URL:"
          git remote -v
          echo "Testing auth with a read-only call..."
          git ls-remote --heads origin >/dev/null
          echo "Auth looks good."

      - name: Commit & push to media repo
        if: ${{ steps.stage_latest.outputs.ok == 'true' }}
        working-directory: ${{ env.MEDIA_DIR }}
        run: |
          set -euo pipefail
          git config user.name  "${{ github.actor }}"
          git config user.email "${{ github.actor }}@users.noreply.github.com"
          git add -A
          if git diff --cached --quiet; then
            echo "No media changes to commit."
          else
            git commit -m "schumann update $(date -u +'%Y-%m-%dT%H:%M:%SZ') [skip ci]"
            git push
          fi

      - name: Append harmonics to ext.schumann (stale rows kept with null value_num)
        if: steps.stage_latest.outputs.ok == 'true'
        working-directory: ${{ env.WORKDIR }}
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_SERVICE_ROLE: ${{ secrets.SUPABASE_SERVICE_ROLE }}
        run: |
          set -euo pipefail
          if [ -z "${SUPABASE_URL:-}" ] || [ -z "${SUPABASE_SERVICE_ROLE:-}" ]; then
            echo "Supabase secrets missing; skipping insert."
            exit 0
          fi

          TS_ISO="$(date -u +'%Y-%m-%dT%H:%M:%SZ')"

          build_rows() {
            local SRC_JSON="$1"   # runs/tomsk_now.json or runs/cumiana_now.json
            local STATION="$2"    # 'tomsk' or 'cumiana'
            local TS="$3"

            local STATUS
            STATUS=$(jq -r '.status // "down"' "$SRC_JSON")

            jq --arg station "$STATION" --arg ts "$TS" --arg status "$STATUS" '
              . as $root
              | ($root.harmonics_hz // {}) as $h
              | ["F1","F2","F3","F4","F5"]
              | map({
                  station_id: $station,
                  ts_utc: $ts,
                  channel: .,
                  value_num: ( if $status == "ok" then ($h[.] // null) else null end ),
                  unit: "Hz",
                  meta: {
                    status: $status,
                    overlay_path: ($root.overlay_path // null),
                    raw: $root
                  }
                })
            ' "$SRC_JSON"
          }

          # Build combined payload (Tomsk + Cumiana)
          jq -s '.[0] + .[1]' \
            <(build_rows runs/tomsk_now.json tomsk   "$TS_ISO") \
            <(build_rows runs/cumiana_now.json cumiana "$TS_ISO") \
            > rows_ext.json

          # Insert (append-only) into ext.schumann via REST. Ensure ext schema is exposed.
          if [ "$(jq 'length' rows_ext.json)" -gt 0 ]; then
            curl -sS "${SUPABASE_URL}/rest/v1/ext_schumann" \
              -H "apikey: ${SUPABASE_SERVICE_ROLE}" \
              -H "Authorization: Bearer ${SUPABASE_SERVICE_ROLE}" \
              -H "Content-Type: application/json" \
              -H "Prefer: resolution=ignore-duplicates" \
              -d @rows_ext.json
          else
            echo "No rows built (unexpected)."
          fi
